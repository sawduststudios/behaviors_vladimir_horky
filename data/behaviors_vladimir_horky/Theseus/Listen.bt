{
  "name": "wait and listen",
  "id": "d8307860-7131-4254-84c4-005d51286196",
  "type": "supervisedParallel",
  "subtrees": [
    {
      "name": "Wait Forever",
      "id": "891bbac1-bb19-4c24-95c8-7ab9db4e2743",
      "type": "waitForever"
    },
    {
      "name": "look around",
      "id": "751e4858-bcc3-46ed-b4b6-b6fdc4be5bb7",
      "type": "sequence",
      "subtrees": [
        {
          "name": "look for targets",
          "id": "38dc0547-d686-4640-bbeb-d8ef2ff9a288",
          "type": "scriptAction",
          "script": [
            "-- infantryman soldier override reaction",
            "loc.visibleEnemies = self:GetVisibleEnemies(70)"
          ]
        },
        {
          "name": "0.5",
          "id": "27f3ceb4-5afd-4ff6-8ad3-d6b257e9d055",
          "type": "wait",
          "time": [
            "return 0.5"
          ]
        }
      ]
    },
    {
      "name": "recieve and follow",
      "id": "3eddf0bf-2e89-4146-b023-ea23ebc9a2c5",
      "type": "supervisedParallel",
      "subtrees": [
        {
          "name": "Recieve Minotaur Pos",
          "id": "0e581c82-9323-4c63-ac13-d77041797033",
          "type": "messageHandler",
          "handler": [
            "if msg and msg.value.position then",
            "    loc.lastKnownMinotaurPosition = msg.value.position",
            "    if loc.TargetPos == nil then",
            "        loc.TargetPos = msg.value.position",
            "    end",
            "end"
          ]
        },
        {
          "name": "Fight or Move",
          "id": "3dba2b39-bf43-4c01-bcf2-376750f6a5c8",
          "type": "selector",
          "subtrees": [
            {
              "name": "fight",
              "id": "db9d3b81-55e0-422b-8dc3-099b18d61121",
              "type": "sequence",
              "subtrees": [
                {
                  "name": "Stop",
                  "id": "cedbeff4-912c-4482-b1f6-6b84ce68a060",
                  "type": "setEntitySpeedLimits",
                  "movementSpeed": [
                    "return 0"
                  ]
                },
                {
                  "name": "select target",
                  "id": "5fd5563e-78e2-42b1-b88c-b61feefba680",
                  "type": "scriptAction",
                  "script": [
                    "loc.shootingTarget = loc.visibleEnemies[math.random(#loc.visibleEnemies)]"
                  ]
                },
                {
                  "name": "Aim",
                  "id": "f915b786-9a6f-4d9f-9684-1e9fc8b47fbd",
                  "type": "scriptAction",
                  "script": [
                    "self:ReqHeadingAimAtEntity(loc.shootingTarget)"
                  ]
                },
                {
                  "name": "Crouch",
                  "id": "8d2955b2-f48f-4a95-8cc6-be2ca9a159a2",
                  "type": "setStance",
                  "stance": [
                    "return Stance.Crouched"
                  ]
                },
                {
                  "name": "Fire",
                  "id": "e138e30e-b4f1-4e32-b8b9-253b36f09070",
                  "type": "fire",
                  "rounds": [
                    "return 10"
                  ],
                  "forced": false
                },
                {
                  "name": "Reload",
                  "id": "51054a8a-f4ad-4313-870e-b1ea79622b12",
                  "type": "reloadWeapon"
                },
                {
                  "name": "Crouch",
                  "id": "427ba3e6-57d0-478b-bf58-f8a92c7477d2",
                  "type": "setStance",
                  "stance": [
                    "return Stance.Standing"
                  ]
                },
                {
                  "name": "Move",
                  "id": "6a747149-8d3b-4797-9ebc-fd556ac2a54b",
                  "type": "resetSpeedLimits"
                }
              ],
              "decorators": [
                {
                  "id": "26efed60-4a82-41aa-a46c-5b61332142ff",
                  "type": "scriptCondition",
                  "name": "reaction",
                  "script": [
                    "if loc.visibleEnemies and #loc.visibleEnemies > 0 then",
                    "    return true",
                    "else",
                    "    loc.shootingTarget = nil",
                    "    return false",
                    "end"
                  ]
                }
              ]
            },
            {
              "name": "Find Path",
              "id": "09d45a14-7eb7-4fe7-963f-6093b2e8fbeb",
              "type": "supervisedParallel",
              "subtrees": [
                {
                  "name": "Move or Wait",
                  "id": "affc040c-3850-4db4-b56b-6eead682bf2b",
                  "type": "selector",
                  "subtrees": [
                    {
                      "name": "Remember move call and move",
                      "id": "42606444-3fea-45fe-b3be-39f468ddf7db",
                      "type": "sequence",
                      "subtrees": [
                        {
                          "name": "Remember move",
                          "id": "4a286b25-7d82-4e15-be63-c7199a5d8e51",
                          "type": "scriptAction",
                          "script": [
                            "loc.moveCalled = true"
                          ]
                        },
                        {
                          "name": "RenewPosition",
                          "id": "f573a4e5-0bc0-4299-b8b7-81f05b04aa7e",
                          "type": "selector",
                          "subtrees": [
                            {
                              "name": "Renew Target Position",
                              "id": "3943dc36-208f-42fa-a804-6e3a778e736e",
                              "type": "scriptAction",
                              "decorators": [
                                {
                                  "id": "2c16b631-c958-43a1-b92d-21c7f90b9106",
                                  "type": "scriptCondition",
                                  "name": "ifMinotaurMoved",
                                  "script": [
                                    "if loc.lastKnownMinotaurPosition == nil or loc.TargetPos == nil then",
                                    "    return false",
                                    "end",
                                    "",
                                    "local distance = loc.lastKnownMinotaurPosition:Distance(loc.TargetPos)",
                                    "return distance > 1"
                                  ]
                                }
                              ],
                              "script": [
                                "loc.TargetPos = loc.lastKnownMinotaurPosition"
                              ]
                            },
                            {
                              "name": "ReachAndWait",
                              "id": "4eb994f5-c797-44ef-baa4-0da39fcb6850",
                              "type": "sequence",
                              "subtrees": [
                                {
                                  "name": "GetToTargetPos",
                                  "id": "5f758f81-c428-4fa5-b3a4-c91d7caf0c49",
                                  "type": "move",
                                  "position": [
                                    "return loc.TargetPos"
                                  ]
                                },
                                {
                                  "name": "Wait Forever",
                                  "id": "547baa84-e177-473d-a5be-82374f09f0c7",
                                  "type": "waitForever"
                                }
                              ]
                            }
                          ],
                          "active": true
                        }
                      ],
                      "decorators": [
                        {
                          "id": "3e5052fe-8b95-4cc2-842a-418f50228971",
                          "type": "scriptCondition",
                          "name": "If known last pos",
                          "script": [
                            "return loc.lastKnownMinotaurPosition ~= nil"
                          ]
                        }
                      ]
                    },
                    {
                      "name": "Wait Forever",
                      "id": "ce1f955d-e2a3-4597-bacb-8ddfefac7c96",
                      "type": "waitForever"
                    }
                  ],
                  "active": true
                },
                {
                  "name": "Wait to Find Path",
                  "id": "52b5706b-f0e1-43eb-819f-0004044e45eb",
                  "type": "sequence",
                  "subtrees": [
                    {
                      "name": "Ask for Path",
                      "id": "889dcbfa-00d8-484e-a7c7-247b67fa2a04",
                      "type": "scriptAction",
                      "decorators": [
                        {
                          "id": "9ba00243-fcdc-48b6-961d-adc2a450b66b",
                          "type": "waitUntil",
                          "name": "Wait Until Move Called",
                          "condition": [
                            "return loc.moveCalled"
                          ]
                        }
                      ],
                      "script": [
                        "loc.pathQuery = FindPath(self:GetPosition(), loc.lastKnownMinotaurPosition)"
                      ]
                    },
                    {
                      "name": "Save Found Path",
                      "id": "f6a67d41-b36f-4911-b140-fb3efd6b0c46",
                      "type": "scriptAction",
                      "decorators": [
                        {
                          "id": "13722a96-2fd4-41d3-857e-d341430d43fa",
                          "type": "waitUntil",
                          "name": "Wait Until Path Ready",
                          "condition": [
                            "return loc.pathQuery:IsReady()"
                          ]
                        }
                      ],
                      "script": [
                        "loc.path = loc.pathQuery:Value()",
                        "loc.pathQuery = nil"
                      ]
                    }
                  ]
                }
              ],
              "decorators": [
                {
                  "id": "437beaaf-238a-4a7f-8522-2a10dd656b46",
                  "type": "loopForever",
                  "name": "<unnamed>"
                }
              ]
            }
          ],
          "active": true
        }
      ]
    },
    {
      "name": "Detect and slow down",
      "id": "6f3f4817-f9c8-431c-9f5e-74c647fc6e65",
      "type": "sequence",
      "subtrees": [
        {
          "name": "Detect Path Angle Change",
          "id": "ff8dcbea-42bd-421f-b1c7-51827e877b13",
          "type": "sequence",
          "subtrees": [
            {
              "name": "Path per meter to Points",
              "id": "69199e34-5e0c-4c5c-a70b-a98b7baab854",
              "type": "scriptAction",
              "script": [
                "if",
                "    loc.path ~= nil",
                "then",
                "    -- local segmentCount = loc.path:GetSegmentCount()",
                "    local pathLen = loc.path:Length()",
                "\tloc.pathPoints = {}",
                "\tfor i = 0, pathLen do",
                "\t\tloc.pathPoints[i+1] = loc.path:PositionAlongPath(i)",
                "\tend",
                "    loc.pathPoints[#loc.pathPoints+1] = loc.path:Goal()",
                "end"
              ]
            },
            {
              "name": "Draw Critical Points",
              "id": "5a33b396-5b32-4078-903b-2b9a28bb6f0f",
              "type": "scriptAction",
              "script": [
                "if",
                "    loc.pathPoints ~= nil",
                "then",
                "    local segmentCount = #loc.pathPoints",
                "    local prevVector = nil",
                "    local currVector = nil",
                "    local critPointsFound = 0",
                "    loc.criticalPoints = {}",
                "\tfor i = 3, segmentCount-1 do",
                "\t\tprevVector = loc.pathPoints[i-1] - loc.pathPoints[i-2]",
                "        currVector = loc.pathPoints[i] - loc.pathPoints[i-1]",
                "        if math.abs(prevVector:AngleTo(currVector)) > 10 then",
                "            -- remember the point",
                "            loc.criticalPoints[#loc.criticalPoints + 1] = loc.pathPoints[i-1]",
                "            -- draw the point",
                "            local OFFSET = Vec3(0,0,2) -- draw up",
                "            ai_core_public.draw.Circle( -- a package we packed, supplied by PepeAmpere",
                "                loc.pathPoints[i-1] + OFFSET,",
                "                1,",
                "                1, 0, 1, 1",
                "            )",
                "            critPointsFound = critPointsFound + 1",
                "        end",
                "\tend",
                "    -- DebugLog(critPointsFound .. \" crit points found on the current path.\")",
                "end"
              ]
            }
          ]
        },
        {
          "name": "Slow down if needed",
          "id": "74b1a3c6-9554-42e9-9fea-938c5e4490ef",
          "type": "selector",
          "subtrees": [
            {
              "name": "Set speed",
              "id": "73b2b4f9-4eb6-4e13-80e4-4625b7c36e58",
              "type": "setEntitySpeedLimits",
              "decorators": [
                {
                  "id": "9cd95626-043a-4172-b452-6557cb7c6ef3",
                  "type": "scriptCondition",
                  "name": "if close to criticalPoint",
                  "script": [
                    "if",
                    "    loc.criticalPoints ~= nil",
                    "then",
                    "    local critPointsCount = #loc.criticalPoints",
                    "\tfor i = 1, critPointsCount do",
                    "\t\tif math.abs(self:GetPosition():Distance(loc.criticalPoints[i])) < 8 then",
                    "            return true",
                    "        end",
                    "     end",
                    "end",
                    "",
                    "return false"
                  ]
                }
              ],
              "movementSpeed": [
                "return 3.5"
              ]
            },
            {
              "name": "Reset speed",
              "id": "472bda19-fef1-4b3c-812f-e30a8cddb32e",
              "type": "resetSpeedLimits"
            }
          ],
          "active": true
        }
      ]
    },
    {
      "name": "Draw Debug stuff",
      "id": "103743d1-43d0-4393-9470-7f798a3b8251",
      "type": "supervisedParallel",
      "subtrees": [
        {
          "name": "Draw current path",
          "id": "9554725a-55a5-428c-bc16-428388deea3d",
          "type": "scriptAction",
          "decorators": [
            {
              "id": "f4b45f97-b58d-4321-812a-905c96b38fa2",
              "type": "loopForever",
              "name": "Draw path if exists"
            }
          ],
          "script": [
            "if",
            "    loc.path ~= nil",
            "then",
            "    local OFFSET = Vec3(0,0,2) -- draw up",
            "    ai_core_public.draw.Path( -- a package we packed, supplied by PepeAmpere",
            "        loc.path,",
            "        1, 0, 1, 1,",
            "        OFFSET",
            "    )",
            "end"
          ]
        },
        {
          "name": "Draw Line to Minotaur",
          "id": "3b792995-9c68-4904-aa1a-b7013b3485a4",
          "type": "scriptAction",
          "decorators": [
            {
              "id": "1f0b3c92-8d7c-4c7c-9423-787658924dab",
              "type": "loopForever",
              "name": "Draw to last known pos if any"
            }
          ],
          "script": [
            "if",
            "    loc.lastKnownMinotaurPosition ~= nil",
            "then",
            "    local OFFSET = Vec3(0,0,2) -- draw up",
            "    ai_core_public.draw.Line( -- a package we packed, supplied by PepeAmpere",
            "        self:GetPosition() + OFFSET,",
            "        loc.lastKnownMinotaurPosition + OFFSET,",
            "        0, 0, 1, 1",
            "    )",
            "end"
          ]
        }
      ]
    }
  ],
  "unlinked-trees": [
    {
      "name": "Draw a line",
      "id": "a0ed62db-0871-4a4c-b6cb-792dd5970a76",
      "type": "parallel",
      "subtrees": [
        {
          "name": "Draw Line to last known Minotaur Position",
          "id": "4b313f0c-1861-4a23-9449-75fc4122fd86",
          "type": "scriptAction",
          "decorators": [
            {
              "id": "8be5b2b0-e839-4068-8f15-c4f81a588502",
              "type": "loopForever",
              "name": "Loop forever"
            }
          ],
          "script": [
            "if",
            "    loc.lastKnownMinotaurPosition ~= nil",
            "then",
            "    local OFFSET = Vec3(0,0,2) -- draw up",
            "    ai_core_public.draw.Line( -- a package we packed, supplied by PepeAmpere",
            "        self:GetPosition() + OFFSET,",
            "        loc.lastKnownMinotaurPosition + OFFSET,",
            "        0, 0, 1, 1",
            "    )",
            "end"
          ]
        },
        {
          "name": "wait 2s",
          "id": "57809d75-d3cd-4cb4-a8bd-c99179e9cbd8",
          "type": "wait",
          "time": [
            "return 2"
          ]
        }
      ],
      "meta": {
        "nodesInfo": [
          {
            "id": "a0ed62db-0871-4a4c-b6cb-792dd5970a76",
            "position": "3952.87698412699,1155.11232787879"
          },
          {
            "id": "4b313f0c-1861-4a23-9449-75fc4122fd86",
            "position": "3752.87698412699,1305.11232787879"
          },
          {
            "id": "57809d75-d3cd-4cb4-a8bd-c99179e9cbd8",
            "position": "4177.87698412699,1305.11232787879"
          }
        ],
        "editorObjects": []
      },
      "waitForAll": false
    },
    {
      "name": "Path Segments to Points",
      "id": "f9ffbe48-fe39-4e18-bfb8-dae4b81a2066",
      "type": "scriptAction",
      "meta": {
        "nodesInfo": [
          {
            "id": "f9ffbe48-fe39-4e18-bfb8-dae4b81a2066",
            "position": "3040.37698412698,1166.11232787878"
          }
        ],
        "editorObjects": []
      },
      "script": [
        "if",
        "    loc.path ~= nil",
        "then",
        "    local segmentCount = loc.path:GetSegmentCount()",
        "\tloc.pathPoints = {}",
        "\tfor i = 0, segmentCount-1 do",
        "\t\tloc.pathPoints[i+1] = loc.path:GetSegmentStart(i)",
        "\tend",
        "    loc.pathPoints[#loc.pathPoints+1] = loc.path:GetSegmentEnd(segmentCount-1)",
        "end"
      ]
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "d8307860-7131-4254-84c4-005d51286196",
        "position": "2465.37698412698,527.112327878791"
      },
      {
        "id": "cc1bf1eb-7647-4b03-acef-13e2b8dfa483",
        "position": "3902.87698412699,1205.11232787879"
      },
      {
        "id": "891bbac1-bb19-4c24-95c8-7ab9db4e2743",
        "position": "990.376984126985,852.112327878791"
      },
      {
        "id": "751e4858-bcc3-46ed-b4b6-b6fdc4be5bb7",
        "position": "1390.37698412698,852.112327878791"
      },
      {
        "id": "38dc0547-d686-4640-bbeb-d8ef2ff9a288",
        "position": "1315.37698412698,952.112327878791"
      },
      {
        "id": "27f3ceb4-5afd-4ff6-8ad3-d6b257e9d055",
        "position": "1477.87698412698,952.112327878791"
      },
      {
        "id": "3eddf0bf-2e89-4146-b023-ea23ebc9a2c5",
        "position": "2202.87698412698,789.612327878791"
      },
      {
        "id": "0e581c82-9323-4c63-ac13-d77041797033",
        "position": "1840.37698412698,928.61232787879"
      },
      {
        "id": "3dba2b39-bf43-4c01-bcf2-376750f6a5c8",
        "position": "2427.87698412698,1039.61232787879"
      },
      {
        "id": "db9d3b81-55e0-422b-8dc3-099b18d61121",
        "position": "1702.87698412698,1202.11232787878"
      },
      {
        "id": "cedbeff4-912c-4482-b1f6-6b84ce68a060",
        "position": "1047.64285714286,1362.01333797979"
      },
      {
        "id": "5fd5563e-78e2-42b1-b88c-b61feefba680",
        "position": "1222.64285714286,1362.01333797979"
      },
      {
        "id": "f915b786-9a6f-4d9f-9684-1e9fc8b47fbd",
        "position": "1385.14285714286,1362.01333797979"
      },
      {
        "id": "8d2955b2-f48f-4a95-8cc6-be2ca9a159a2",
        "position": "1572.64285714286,1362.01333797979"
      },
      {
        "id": "e138e30e-b4f1-4e32-b8b9-253b36f09070",
        "position": "1772.64285714286,1362.01333797979"
      },
      {
        "id": "51054a8a-f4ad-4313-870e-b1ea79622b12",
        "position": "1960.14285714286,1362.01333797979"
      },
      {
        "id": "427ba3e6-57d0-478b-bf58-f8a92c7477d2",
        "position": "2127.87698412698,1366.11232787879"
      },
      {
        "id": "6a747149-8d3b-4797-9ebc-fd556ac2a54b",
        "position": "2290.37698412698,1353.61232787879"
      },
      {
        "id": "09d45a14-7eb7-4fe7-963f-6093b2e8fbeb",
        "position": "2865.37698412698,1239.61232787878"
      },
      {
        "id": "affc040c-3850-4db4-b56b-6eead682bf2b",
        "position": "2427.87698412698,1464.61232787878"
      },
      {
        "id": "42606444-3fea-45fe-b3be-39f468ddf7db",
        "position": "2240.37698412698,1577.11232787878"
      },
      {
        "id": "4a286b25-7d82-4e15-be63-c7199a5d8e51",
        "position": "2143.05952380952,1781.4573495238"
      },
      {
        "id": "f573a4e5-0bc0-4299-b8b7-81f05b04aa7e",
        "position": "2427.87698412698,1789.61232787878"
      },
      {
        "id": "3943dc36-208f-42fa-a804-6e3a778e736e",
        "position": "2252.87698412698,1989.61232787878"
      },
      {
        "id": "4eb994f5-c797-44ef-baa4-0da39fcb6850",
        "position": "2627.87698412698,1977.11232787878"
      },
      {
        "id": "5f758f81-c428-4fa5-b3a4-c91d7caf0c49",
        "position": "2540.37698412698,2164.61232787878"
      },
      {
        "id": "547baa84-e177-473d-a5be-82374f09f0c7",
        "position": "2852.87698412698,2152.11232787878"
      },
      {
        "id": "ce1f955d-e2a3-4597-bacb-8ddfefac7c96",
        "position": "2665.37698412698,1664.61232787878"
      },
      {
        "id": "52b5706b-f0e1-43eb-819f-0004044e45eb",
        "position": "3002.87698412698,1452.11232787878"
      },
      {
        "id": "889dcbfa-00d8-484e-a7c7-247b67fa2a04",
        "position": "2927.87698412698,1652.11232787878"
      },
      {
        "id": "f6a67d41-b36f-4911-b140-fb3efd6b0c46",
        "position": "3165.37698412698,1639.61232787878"
      },
      {
        "id": "6f3f4817-f9c8-431c-9f5e-74c647fc6e65",
        "position": "3202.87698412698,728.61232787879"
      },
      {
        "id": "ff8dcbea-42bd-421f-b1c7-51827e877b13",
        "position": "3065.37698412698,853.61232787879"
      },
      {
        "id": "69199e34-5e0c-4c5c-a70b-a98b7baab854",
        "position": "3001.37698412698,1069.96131777778"
      },
      {
        "id": "5a33b396-5b32-4078-903b-2b9a28bb6f0f",
        "position": "3252.87698412698,1066.11232787879"
      },
      {
        "id": "74b1a3c6-9554-42e9-9fea-938c5e4490ef",
        "position": "3540.37698412698,841.11232787879"
      },
      {
        "id": "73b2b4f9-4eb6-4e13-80e4-4625b7c36e58",
        "position": "3490.37698412698,978.61232787879"
      },
      {
        "id": "472bda19-fef1-4b3c-812f-e30a8cddb32e",
        "position": "3727.87698412698,1003.61232787879"
      },
      {
        "id": "103743d1-43d0-4393-9470-7f798a3b8251",
        "position": "3952.87698412698,741.11232787879"
      },
      {
        "id": "9554725a-55a5-428c-bc16-428388deea3d",
        "position": "3915.37698412698,891.11232787879"
      },
      {
        "id": "3b792995-9c68-4904-aa1a-b7013b3485a4",
        "position": "4127.87698412698,891.11232787879"
      }
    ],
    "editorObjects": [
      {
        "id": "cc1bf1eb-7647-4b03-acef-13e2b8dfa483",
        "type": "comment",
        "header": "",
        "body": "Hack: keep on running (only wait can end this paralel)",
        "bodyAlignment": "Left",
        "headerBackground": "#FF00FF00",
        "headerForeground": "#FF000000",
        "boxBackground": "#FF90EE90",
        "boxForeground": "#FF000000"
      }
    ],
    "canvasSize": "5536.27406204906,2877.61232787878",
    "gridPadding": "2.87698412698455,3.61232787878996"
  },
  "parameters": [
    {
      "name": "orderData",
      "isOptional": false,
      "defaultValue": "",
      "evaluation": "passByReference"
    }
  ],
  "locals": {
    "lastKnownMinotaurPosition": "return nil",
    "pathQuery": "return nil",
    "path": "return nil",
    "pathPoints": "return nil",
    "criticalPoints": "return nil",
    "moveCalled": "return false",
    "TargetPos": "return nil",
    "visibleEnemies": "return nil",
    "shootingTarget": "return nil"
  }
}