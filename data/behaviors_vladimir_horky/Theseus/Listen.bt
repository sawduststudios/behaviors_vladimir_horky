{
  "name": "wait and listen",
  "id": "d8307860-7131-4254-84c4-005d51286196",
  "type": "supervisedParallel",
  "subtrees": [
    {
      "name": "Wait Forever",
      "id": "891bbac1-bb19-4c24-95c8-7ab9db4e2743",
      "type": "waitForever"
    },
    {
      "name": "Recieve msg and Draw",
      "id": "d30340a5-6dd6-46c0-b379-009bff4adada",
      "type": "sequence",
      "subtrees": [
        {
          "name": "Recieve Minotaur Pos",
          "id": "0e581c82-9323-4c63-ac13-d77041797033",
          "type": "messageHandler",
          "handler": [
            "if msg and msg.value.position then",
            "    loc.lastKnownMinotaurPosition = msg.value.position",
            "end"
          ]
        },
        {
          "name": "Find Path",
          "id": "09d45a14-7eb7-4fe7-963f-6093b2e8fbeb",
          "type": "supervisedParallel",
          "subtrees": [
            {
              "name": "Wait to Find Path",
              "id": "52b5706b-f0e1-43eb-819f-0004044e45eb",
              "type": "sequence",
              "subtrees": [
                {
                  "name": "Ask for Path",
                  "id": "889dcbfa-00d8-484e-a7c7-247b67fa2a04",
                  "type": "scriptAction",
                  "script": [
                    "loc.pathQuery = FindPath(self:GetPosition(), loc.lastKnownMinotaurPosition)"
                  ]
                },
                {
                  "name": "Save Found Path",
                  "id": "f6a67d41-b36f-4911-b140-fb3efd6b0c46",
                  "type": "scriptAction",
                  "decorators": [
                    {
                      "id": "13722a96-2fd4-41d3-857e-d341430d43fa",
                      "type": "waitUntil",
                      "name": "Wait Until Path Ready",
                      "condition": [
                        "return loc.pathQuery:IsReady()"
                      ]
                    }
                  ],
                  "script": [
                    "loc.path = loc.pathQuery:Value()"
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Detect Path Angle Change",
      "id": "ff8dcbea-42bd-421f-b1c7-51827e877b13",
      "type": "sequence",
      "subtrees": [
        {
          "name": "Path per meter to Points",
          "id": "69199e34-5e0c-4c5c-a70b-a98b7baab854",
          "type": "scriptAction",
          "script": [
            "if",
            "    loc.path ~= nil",
            "then",
            "    -- local segmentCount = loc.path:GetSegmentCount()",
            "    local pathLen = loc.path:Length()",
            "\tloc.pathPoints = {}",
            "\tfor i = 0, pathLen do",
            "\t\tloc.pathPoints[i+1] = loc.path:PositionAlongPath(i)",
            "\tend",
            "    loc.pathPoints[#loc.pathPoints+1] = loc.path:Goal()",
            "end"
          ]
        },
        {
          "name": "Draw Critical Points",
          "id": "5a33b396-5b32-4078-903b-2b9a28bb6f0f",
          "type": "scriptAction",
          "script": [
            "if",
            "    loc.pathPoints ~= nil",
            "then",
            "    local segmentCount = #loc.pathPoints",
            "    local prevVector = nil",
            "    local currVector = nil",
            "    local critPointsFound = 0",
            "\tfor i = 3, segmentCount-1 do",
            "\t\tprevVector = loc.pathPoints[i-1] - loc.pathPoints[i-2]",
            "        currVector = loc.pathPoints[i] - loc.pathPoints[i-1]",
            "        if math.abs(prevVector:AngleTo(currVector)) > 10 then",
            "            local OFFSET = Vec3(0,0,2) -- draw up",
            "            ai_core_public.draw.Circle( -- a package we packed, supplied by PepeAmpere",
            "                loc.pathPoints[i-1] + OFFSET,",
            "                1,",
            "                1, 0, 1, 1",
            "            )",
            "            critPointsFound = critPointsFound + 1",
            "        end",
            "\tend",
            "    DebugLog(critPointsFound .. \" crit points found on the current path.\")",
            "end"
          ]
        }
      ]
    },
    {
      "name": "Draw Debug stuff",
      "id": "103743d1-43d0-4393-9470-7f798a3b8251",
      "type": "supervisedParallel",
      "subtrees": [
        {
          "name": "Draw current path",
          "id": "9554725a-55a5-428c-bc16-428388deea3d",
          "type": "scriptAction",
          "decorators": [
            {
              "id": "f4b45f97-b58d-4321-812a-905c96b38fa2",
              "type": "loopForever",
              "name": "Draw path if exists"
            }
          ],
          "script": [
            "if",
            "    loc.path ~= nil",
            "then",
            "    local OFFSET = Vec3(0,0,2) -- draw up",
            "    ai_core_public.draw.Path( -- a package we packed, supplied by PepeAmpere",
            "        loc.path,",
            "        1, 0, 1, 1,",
            "        OFFSET",
            "    )",
            "end"
          ]
        },
        {
          "name": "Draw Line to Minotaur",
          "id": "3b792995-9c68-4904-aa1a-b7013b3485a4",
          "type": "scriptAction",
          "decorators": [
            {
              "id": "1f0b3c92-8d7c-4c7c-9423-787658924dab",
              "type": "loopForever",
              "name": "Draw to last known pos if any"
            }
          ],
          "script": [
            "if",
            "    loc.lastKnownMinotaurPosition ~= nil",
            "then",
            "    local OFFSET = Vec3(0,0,2) -- draw up",
            "    ai_core_public.draw.Line( -- a package we packed, supplied by PepeAmpere",
            "        self:GetPosition() + OFFSET,",
            "        loc.lastKnownMinotaurPosition + OFFSET,",
            "        0, 0, 1, 1",
            "    )",
            "end"
          ]
        }
      ]
    }
  ],
  "unlinked-trees": [
    {
      "name": "Draw a line",
      "id": "a0ed62db-0871-4a4c-b6cb-792dd5970a76",
      "type": "parallel",
      "subtrees": [
        {
          "name": "Draw Line to last known Minotaur Position",
          "id": "4b313f0c-1861-4a23-9449-75fc4122fd86",
          "type": "scriptAction",
          "decorators": [
            {
              "id": "8be5b2b0-e839-4068-8f15-c4f81a588502",
              "type": "loopForever",
              "name": "Loop forever"
            }
          ],
          "script": [
            "if",
            "    loc.lastKnownMinotaurPosition ~= nil",
            "then",
            "    local OFFSET = Vec3(0,0,2) -- draw up",
            "    ai_core_public.draw.Line( -- a package we packed, supplied by PepeAmpere",
            "        self:GetPosition() + OFFSET,",
            "        loc.lastKnownMinotaurPosition + OFFSET,",
            "        0, 0, 1, 1",
            "    )",
            "end"
          ]
        },
        {
          "name": "wait 2s",
          "id": "57809d75-d3cd-4cb4-a8bd-c99179e9cbd8",
          "type": "wait",
          "time": [
            "return 2"
          ]
        }
      ],
      "meta": {
        "nodesInfo": [
          {
            "id": "a0ed62db-0871-4a4c-b6cb-792dd5970a76",
            "position": "3537.5,279.90101010101"
          },
          {
            "id": "4b313f0c-1861-4a23-9449-75fc4122fd86",
            "position": "3337.5,429.90101010101"
          },
          {
            "id": "57809d75-d3cd-4cb4-a8bd-c99179e9cbd8",
            "position": "3762.5,429.90101010101"
          }
        ],
        "editorObjects": []
      },
      "waitForAll": false
    },
    {
      "name": "Path Segments to Points",
      "id": "f9ffbe48-fe39-4e18-bfb8-dae4b81a2066",
      "type": "scriptAction",
      "meta": {
        "nodesInfo": [
          {
            "id": "f9ffbe48-fe39-4e18-bfb8-dae4b81a2066",
            "position": "2400,892.40101010101"
          }
        ],
        "editorObjects": []
      },
      "script": [
        "if",
        "    loc.path ~= nil",
        "then",
        "    local segmentCount = loc.path:GetSegmentCount()",
        "\tloc.pathPoints = {}",
        "\tfor i = 0, segmentCount-1 do",
        "\t\tloc.pathPoints[i+1] = loc.path:GetSegmentStart(i)",
        "\tend",
        "    loc.pathPoints[#loc.pathPoints+1] = loc.path:GetSegmentEnd(segmentCount-1)",
        "end"
      ]
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "d8307860-7131-4254-84c4-005d51286196",
        "position": "1912.5,129.90101010101"
      },
      {
        "id": "cc1bf1eb-7647-4b03-acef-13e2b8dfa483",
        "position": "3487.5,329.90101010101"
      },
      {
        "id": "891bbac1-bb19-4c24-95c8-7ab9db4e2743",
        "position": "1575,392.40101010101"
      },
      {
        "id": "d30340a5-6dd6-46c0-b379-009bff4adada",
        "position": "1862.5,529.90101010101"
      },
      {
        "id": "0e581c82-9323-4c63-ac13-d77041797033",
        "position": "1600,679.90101010101"
      },
      {
        "id": "09d45a14-7eb7-4fe7-963f-6093b2e8fbeb",
        "position": "2025,692.40101010101"
      },
      {
        "id": "52b5706b-f0e1-43eb-819f-0004044e45eb",
        "position": "1837.5,829.90101010101"
      },
      {
        "id": "889dcbfa-00d8-484e-a7c7-247b67fa2a04",
        "position": "1725,1017.40101010101"
      },
      {
        "id": "f6a67d41-b36f-4911-b140-fb3efd6b0c46",
        "position": "1987.5,1067.40101010101"
      },
      {
        "id": "ff8dcbea-42bd-421f-b1c7-51827e877b13",
        "position": "2387.5,567.40101010101"
      },
      {
        "id": "69199e34-5e0c-4c5c-a70b-a98b7baab854",
        "position": "2323.5,783.75"
      },
      {
        "id": "5a33b396-5b32-4078-903b-2b9a28bb6f0f",
        "position": "2587.5,754.90101010101"
      },
      {
        "id": "103743d1-43d0-4393-9470-7f798a3b8251",
        "position": "2862.5,267.40101010101"
      },
      {
        "id": "9554725a-55a5-428c-bc16-428388deea3d",
        "position": "2825,417.40101010101"
      },
      {
        "id": "3b792995-9c68-4904-aa1a-b7013b3485a4",
        "position": "3037.5,417.40101010101"
      }
    ],
    "editorObjects": [
      {
        "id": "cc1bf1eb-7647-4b03-acef-13e2b8dfa483",
        "type": "comment",
        "header": "",
        "body": "Hack: keep on running (only wait can end this paralel)",
        "bodyAlignment": "Left",
        "headerBackground": "#FF00FF00",
        "headerForeground": "#FF000000",
        "boxBackground": "#FF90EE90",
        "boxForeground": "#FF000000"
      }
    ],
    "canvasSize": "3965.5,2467.40101010101",
    "gridPadding": "0,4.90101010101009"
  },
  "parameters": [
    {
      "name": "orderData",
      "isOptional": false,
      "evaluation": "passByReference"
    }
  ],
  "locals": {
    "lastKnownMinotaurPosition": "return self:GetPosition() + Vec3(100,100,0)",
    "pathQuery": "return nil",
    "path": "return nil",
    "pathPoints": "return nil"
  }
}