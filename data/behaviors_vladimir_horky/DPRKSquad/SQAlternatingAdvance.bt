{
  "name": "wait and advance",
  "id": "2f63bc08-de32-4fdb-bd76-ff5f64026b56",
  "type": "supervisedParallel",
  "subtrees": [
    {
      "name": "someone is alive?",
      "id": "da94f6e9-1953-46a7-a8a6-d92420ad40c9",
      "type": "selector",
      "subtrees": [
        {
          "name": "Wait Forever",
          "id": "a081bed9-7910-4ddf-8f90-9242015b130d",
          "type": "waitForever",
          "decorators": [
            {
              "id": "1e3c8cd0-ff0f-45d5-af34-081c99c4d0d4",
              "type": "scriptCondition",
              "name": "?found leader?",
              "script": [
                "-- try to find an alive solider",
                "loc.foundLeader = nil",
                "local leaderCandidate = nil",
                "",
                "-- iterate over the teams",
                "local fireTeamCount = self:GetChildGroupCount()",
                "for i=1,fireTeamCount do    ",
                "    local iGroup = self:GetChildGroup(i)",
                "",
                "    -- try and get group leader",
                "    leaderCandidate = iGroup:GetLeader()",
                "    if leaderCandidate:IsAlive() then",
                "       loc.foundLeaderGroup = iGroup",
                "       loc.foundLeader = leaderCandidate",
                "       break ",
                "    end",
                "",
                "    -- if group leader is dead",
                "    -- iterate over the soliders and try to find an alive one",
                "    local soliderCount = iGroup:GetChildGroupCount()",
                "    for s=1,soliderCount do",
                "        leaderCandidate = iGroup:GetChildGroup(i)",
                "        if leaderCandidate:IsAlive() then",
                "            loc.foundLeaderGroup = iGroup",
                "            loc.foundLeader = leaderCandidate",
                "            break ",
                "        end",
                "    end",
                "",
                "    -- noone alive, try again for next fire team    ",
                "end",
                "",
                "if loc.foundLeader == nil then",
                "    return false",
                "else",
                "    return true",
                "end"
              ]
            }
          ]
        },
        {
          "name": "Fail",
          "id": "91f75bf4-774f-49a8-a256-aa9f16e2bc6c",
          "type": "fail"
        }
      ],
      "active": true
    },
    {
      "name": "Set Up Team Data",
      "id": "d5a8f45f-82fc-4090-a05b-4a873ee45920",
      "type": "scriptAction",
      "script": [
        "loc.aliveFireTeams = {}",
        "loc.aliveFireTeams[1] = loc.foundLeaderGroup",
        "-- iterate over the teams",
        "local teamIndex = 2;",
        "local fireTeamCount = self:GetChildGroupCount()",
        "for i=1,fireTeamCount do    ",
        "    local iGroup = self:GetChildGroup(i-1)",
        "",
        "    if iGroup ~= loc.foundLeaderGroup then",
        "         -- iterate over the soliders and try to find an alive one",
        "        local anyOneAlive = false",
        "        local soliderCount = iGroup:GetChildGroupCount()",
        "        local foundSolider = nil",
        "        for s=1,soliderCount do",
        "            foundSolider = iGroup:GetChildGroup(i)",
        "            if foundSolider:IsAlive() then",
        "                anyOneAlive = true",
        "                break ",
        "            end",
        "        end",
        "",
        "        -- if someone is alive, we add them to our found fire teams",
        "        loc.aliveFireTeams[teamIndex] = iGroup",
        "        teamIndex = teamIndex + 1",
        "    end   ",
        "end"
      ]
    },
    {
      "name": "Wait to Find Path",
      "id": "ec4b20ec-9ef8-49d6-a3c9-38ffbcd26728",
      "type": "sequence",
      "subtrees": [
        {
          "name": "Ask for Path",
          "id": "05d38b85-d666-4c97-823b-24ee816487e0",
          "type": "scriptAction",
          "decorators": [
            {
              "id": "8e5989ee-b572-4952-ba89-525e6bd904e0",
              "type": "waitUntil",
              "name": "Wait Until Destination Given",
              "condition": [
                "return arg.orderData.destination ~= nil"
              ]
            }
          ],
          "script": [
            "loc.pathQuery = FindPath(loc.foundLeader:GetPosition(), arg.orderData.destination)"
          ]
        },
        {
          "name": "Save Found Path",
          "id": "edd0e148-4e55-4a90-ac71-e34fd856549d",
          "type": "scriptAction",
          "decorators": [
            {
              "id": "d6ffec0e-d8f4-4b8f-a971-c09465c9bab8",
              "type": "waitUntil",
              "name": "Wait Until Path Ready",
              "condition": [
                "return loc.pathQuery:IsReady()"
              ]
            }
          ],
          "script": [
            "loc.path = loc.pathQuery:Value()",
            "loc.pathQuery = nil"
          ]
        }
      ]
    },
    {
      "name": "Draw current path",
      "id": "ceafd781-ca4d-4c33-9092-ceea2a693ac7",
      "type": "scriptAction",
      "decorators": [
        {
          "id": "a7145aa0-d5cb-464c-a7a7-72e139201ee3",
          "type": "loopForever",
          "name": "Draw path if exists"
        }
      ],
      "script": [
        "if",
        "    loc.path ~= nil",
        "then",
        "    local OFFSET = Vec3(0,0,2) -- draw up",
        "    ai_core_public.draw.Path( -- a package we packed, supplied by PepeAmpere",
        "        loc.path,",
        "        1, 0, 1, 1,",
        "        OFFSET",
        "    )",
        "end"
      ]
    },
    {
      "name": "if path exists",
      "id": "e48a1408-2c3a-4dc8-8148-699fe96e5ec9",
      "type": "selector",
      "subtrees": [
        {
          "name": "Set Up PathPoints",
          "id": "1221f95b-0654-4b1c-9f4a-b8f4c7f2e69c",
          "type": "scriptAction",
          "decorators": [
            {
              "id": "a8f3e9e1-a3ab-474d-8c30-f06f23af70d3",
              "type": "scriptCondition",
              "name": "if path exists",
              "script": [
                "if loc.path ~= nil then",
                "    return true",
                "end",
                "return false"
              ]
            }
          ],
          "script": [
            "loc.controlPoints = {}",
            "",
            "local pathLen = loc.path:Length()",
            "local segmentCount = math.floor(pathLen / loc.controlPointDistance)",
            "",
            "for iSeg=1,segmentCount do",
            "    local newPoint = loc.path:PositionAlongPath(loc.controlPointDistance*iSeg)",
            "    loc.controlPoints[iSeg] = newPoint",
            "end",
            "",
            "if loc.controlPoints[segmentCount]:Distance(arg.orderData.destination) > loc.controlPointDistance/2 then",
            "   loc.controlPoints[segmentCount+1] = arg.orderData.destination",
            "else",
            "   loc.controlPoints[segmentCount] = arg.orderData.destination",
            "end",
            ""
          ]
        },
        {
          "name": "Wait Forever",
          "id": "cec08acc-834f-4cb9-82e6-306194bc4a39",
          "type": "waitForever"
        }
      ],
      "active": true
    },
    {
      "name": "Draw Control points",
      "id": "2bbe1616-6ec0-491c-8f93-a4a766793b68",
      "type": "scriptAction",
      "decorators": [
        {
          "id": "f80f77d7-6cce-48f6-92ae-9d930bcc5fc5",
          "type": "loopForever",
          "name": "Draw control points"
        }
      ],
      "script": [
        "if",
        "    loc.controlPoints ~= nil",
        "then",
        "    local OFFSET = Vec3(0,0,2) -- draw up",
        "    for i=1,#loc.controlPoints do",
        "        ai_core_public.draw.Circle( -- a package we packed, supplied by PepeAmpere",
        "                loc.controlPoints[i] + OFFSET,",
        "                1,",
        "                1, 0, 1, 1",
        "            )",
        "    end",
        "end"
      ]
    },
    {
      "name": "Wait Forever",
      "id": "1845c78d-7fa6-4c87-9a7e-a18acdb25645",
      "type": "waitForever"
    }
  ],
  "unlinked-trees": [
    {
      "name": "prepare and send order",
      "id": "763c3c20-8371-4343-a9e7-610978f21c12",
      "type": "sequence",
      "subtrees": [
        {
          "name": "prepare order data",
          "id": "11d50994-7e95-4198-ade8-185601053d1c",
          "type": "scriptAction",
          "script": [
            "loc.subOrderData = {orderName = \"Advance\", destination = arg.orderData.destination}",
            "loc.subordinates = {loc.foundLeaderGroup}",
            "loc.subordinateData = {}",
            "-- loc.subordinateData = {destination = arg.orderData.destination}"
          ]
        },
        {
          "name": "Clear area for all subordinates",
          "id": "5b947242-2a47-466a-bcb8-46aa3834398c",
          "type": "reference",
          "target": [
            "standard_behaviors",
            "ExecuteSubordinateOrder"
          ],
          "arguments": {
            "orderData": "return loc.subOrderData",
            "subordinates": "return loc.subordinates",
            "subordinateData": "return loc.subordinateData",
            "update": "return false"
          }
        }
      ],
      "meta": {
        "nodesInfo": [
          {
            "id": "763c3c20-8371-4343-a9e7-610978f21c12",
            "position": "3109.16428571429,402.771428571429"
          },
          {
            "id": "11d50994-7e95-4198-ade8-185601053d1c",
            "position": "2967.95,577.057142857143"
          },
          {
            "id": "5b947242-2a47-466a-bcb8-46aa3834398c",
            "position": "3167.95,564.557142857143"
          }
        ],
        "editorObjects": []
      }
    },
    {
      "name": "find a living leader",
      "id": "d1227ece-b124-4a52-a0e2-cb8e03c6252c",
      "type": "scriptAction",
      "meta": {
        "nodesInfo": [
          {
            "id": "d1227ece-b124-4a52-a0e2-cb8e03c6252c",
            "position": "1017.95,802.057142857143"
          }
        ],
        "editorObjects": []
      },
      "script": [
        "-- lets iterate over all fire teams",
        "",
        "local fireTeamCount = self:GetChildGroupCount()",
        "",
        "local leaderCandidate = nil",
        "",
        "-- iterate over the teams",
        "for i=1,fireTeamCount do    ",
        "    local iGroup = self:GetChildGroup(i)",
        "",
        "    -- try and get group leader",
        "    leaderCandidate = iGroup:GetLeader()",
        "    if leaderCandidate:IsAlive() then",
        "       loc.foundLeader = leaderCandidate",
        "       break ",
        "    end",
        "",
        "    -- if group leader is dead",
        "    -- iterate over the soliders and try to find an alive one",
        "    local soliderCount = iGroup:GetChildGroupCount()",
        "    for s=1,soliderCount do",
        "        leaderCandidate = iGroup:GetChildGroup(i)",
        "        if leaderCandidate:IsAlive() then",
        "            loc.foundLeader = leaderCandidate",
        "            break ",
        "        end",
        "    end",
        "",
        "    -- noone alive, try again for next fire team    ",
        "end"
      ]
    }
  ],
  "meta": {
    "nodesInfo": [
      {
        "id": "2f63bc08-de32-4fdb-bd76-ff5f64026b56",
        "position": "2142.95,314.557142857143"
      },
      {
        "id": "a60a1b56-abc5-44d0-bd32-8a980ce1b107",
        "position": "3317.95,427.057142857143"
      },
      {
        "id": "da94f6e9-1953-46a7-a8a6-d92420ad40c9",
        "position": "1155.45,427.057142857143"
      },
      {
        "id": "a081bed9-7910-4ddf-8f90-9242015b130d",
        "position": "1017.95,552.057142857143"
      },
      {
        "id": "91f75bf4-774f-49a8-a256-aa9f16e2bc6c",
        "position": "1230.45,552.057142857143"
      },
      {
        "id": "d5a8f45f-82fc-4090-a05b-4a873ee45920",
        "position": "1467.95,502.057142857143"
      },
      {
        "id": "ec4b20ec-9ef8-49d6-a3c9-38ffbcd26728",
        "position": "1517.95,739.557142857143"
      },
      {
        "id": "05d38b85-d666-4c97-823b-24ee816487e0",
        "position": "1442.95,939.557142857143"
      },
      {
        "id": "edd0e148-4e55-4a90-ac71-e34fd856549d",
        "position": "1680.45,927.057142857143"
      },
      {
        "id": "ceafd781-ca4d-4c33-9092-ceea2a693ac7",
        "position": "1855.45,727.057142857143"
      },
      {
        "id": "e48a1408-2c3a-4dc8-8148-699fe96e5ec9",
        "position": "2297.95,687.916666666666"
      },
      {
        "id": "1221f95b-0654-4b1c-9f4a-b8f4c7f2e69c",
        "position": "2142.95,789.557142857143"
      },
      {
        "id": "cec08acc-834f-4cb9-82e6-306194bc4a39",
        "position": "2405.45,789.557142857143"
      },
      {
        "id": "2bbe1616-6ec0-491c-8f93-a4a766793b68",
        "position": "2617.95,702.057142857143"
      },
      {
        "id": "1845c78d-7fa6-4c87-9a7e-a18acdb25645",
        "position": "2655.45,414.557142857143"
      }
    ],
    "editorObjects": [
      {
        "id": "a60a1b56-abc5-44d0-bd32-8a980ce1b107",
        "type": "comment",
        "header": "",
        "body": "orderData - co za order chci pustit na InfantryTeam; {orderName = \"Advance\"}\r\nsubordinates - reference na fire tymy (asi jen jeden)\r\nsubordinateData - klice jsou subordinate reference, hodnoty jsou tabulky orderData specificka kazdemu fire tymu\r\n{destination = vypoctena pozice, Vec3} \r\nhttps://manuals.bisimulations.com/VBS_Sim_SDK/VBS4-24-2/Content/VBS_Control_Editor/Behaviors_Config_Reference/standard_behaviors_InfantryTeam.htm?Highlight=InfantryTeam#behaviors_Advance\r\nupdate - tam proste dam false",
        "bodyAlignment": "Left",
        "headerBackground": "#FF00FF00",
        "headerForeground": "#FF000000",
        "boxBackground": "#FF90EE90",
        "boxForeground": "#FF000000"
      }
    ],
    "canvasSize": "4405.95,2803.05714285714",
    "gridPadding": "5.45000000000005,2.05714285714305"
  },
  "parameters": [
    {
      "name": "orderData",
      "isOptional": false,
      "defaultValue": "",
      "evaluation": "passByReference"
    }
  ],
  "locals": {
    "controlPointDistance": "return 30",
    "foundLeader": "return nil",
    "foundLeaderGroup": "return nil",
    "subOrderData": "return nil",
    "subordinates": "return nil",
    "subordinateData": "return nil",
    "pathQuery": "return nil",
    "path": "return nil",
    "aliveFireTeams": "return nil",
    "controlPoints": "return nil"
  }
}